{
  "1": {
    "problem_statement": "<p>Consider an algorithm that takes as input a positive integer <span class=\"math inline\">n</span>. If <span class=\"math inline\">n</span> is even, the algorithm divides it by two, and if <span class=\"math inline\">n</span> is odd, the algorithm multiplies it by three and adds one. The algorithm repeats this, until <span class=\"math inline\">n</span> is one. For example, the sequence for <span class=\"math inline\">n=3</span> is as follows:\n<span class=\"math display\"> 3 \\rightarrow 10 \\rightarrow 5 \\rightarrow 16 \\rightarrow 8 \\rightarrow 4 \\rightarrow 2 \\rightarrow 1</span>\nYour task is to simulate the execution of the algorithm for a given value of <span class=\"math inline\">n</span>.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Weird Algorithm"
  },
  "2": {
    "problem_statement": "<p>You are given all numbers between <span class=\"math inline\">1,2,\\ldots,n</span> except one. Your task is to find the missing number.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Missing Number"
  },
  "3": {
    "problem_statement": "<p>You are given a DNA sequence: a string consisting of characters A, C, G, and T. Your task is to find the longest repetition in the sequence. This is a maximum-length substring containing only one type of character.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Repetitions"
  },
  "4": {
    "problem_statement": "<p>You are given an array of <span class=\"math inline\">n</span> integers. You want to modify the array so that it is increasing, i.e., every element is at least as large as the previous element.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Increasing Array"
  },
  "5": { "error": "", "problem_title": "Permutations" },
  "6": {
    "problem_statement": "<p>A number spiral is an infinite grid whose upper-left square has number 1. Here are the first five layers of the spiral:\n<center><img alt=\"\" class=\"invertible\" src=\"/file/bba36f2601b99c7edc15865aa2a49e680a271075f30e86aa0e4e18d00a779c21\"/></center>\nYour task is to find out the number in row <span class=\"math inline\">y</span> and column <span class=\"math inline\">x</span>.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Number Spiral"
  },
  "7": {
    "problem_statement": "<p>Your task is to count for <span class=\"math inline\">k=1,2,\\ldots,n</span> the number of ways two knights can be placed on a <span class=\"math inline\">k \\times k</span> chessboard so that they do not attack each other.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Two Knights"
  },
  "8": { "error": "", "problem_title": "Two Sets" },
  "9": {
    "problem_statement": "<p>Your task is to calculate the number of bit strings of length <span class=\"math inline\">n</span>.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Bit Strings"
  },
  "10": {
    "problem_statement": "<p>Your task is to calculate the number of trailing zeros in the factorial <span class=\"math inline\">n!</span>.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Trailing Zeros"
  },
  "11": {
    "problem_statement": "<p>You have two coin piles containing <span class=\"math inline\">a</span> and <span class=\"math inline\">b</span> coins. On each move, you can either remove one coin from the left pile and two coins from the right pile, or two coins from the left pile and one coin from the right pile.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Coin Piles"
  },
  "12": {
    "problem_statement": "<p>Given a string, your task is to reorder its letters in such a way that it becomes a palindrome (i.e., it reads the same forwards and backwards).</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Palindrome Reorder"
  },
  "13": {
    "problem_statement": "<p>A Gray code is a list of all <span class=\"math inline\">2^n</span> bit strings of length <span class=\"math inline\">n</span>, where any two successive strings differ in exactly one bit (i.e., their Hamming distance is one).</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Gray Code"
  },
  "14": {
    "problem_statement": "<p>The Tower of Hanoi game consists of three stacks (left, middle and right) and <span class=\"math inline\">n</span> round disks of different sizes. Initially, the left stack has all the disks, in increasing order of size from top to bottom. </p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Tower of Hanoi"
  },
  "15": {
    "problem_statement": "<p>Given a string, your task is to generate all different strings that can be created using its characters.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Creating Strings"
  },
  "16": {
    "problem_statement": "<p>There are <span class=\"math inline\">n</span> apples with known weights. Your task is to divide the apples into two groups so that the difference between the weights of the groups is minimal.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Apple Division"
  },
  "17": { "error": "", "problem_title": "Chessboard and Queens" },
  "18": {
    "problem_statement": "<p>Consider an infinite string that consists of all positive integers in increasing order:</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Digit Queries"
  },
  "19": {
    "problem_statement": "<p>Consider an <span class=\"math inline\">n \\times n</span> grid whose top-left square is <span class=\"math inline\">(1,1)</span> and bottom-right square is <span class=\"math inline\">(n,n)</span>.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Grid Paths"
  },
  "20": {
    "problem_statement": "<p>You are given a list of <span class=\"math inline\">n</span> integers, and your task is to calculate the number of <em>distinct</em> values in the list.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Distinct Numbers"
  },
  "21": {
    "problem_statement": "<p>There are <span class=\"math inline\">n</span> applicants and <span class=\"math inline\">m</span> free apartments. Your task is to distribute the apartments so that as many applicants as possible will get an apartment.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Apartments"
  },
  "22": {
    "problem_statement": "<p>There are <span class=\"math inline\">n</span> children who want to go to a Ferris wheel, and your task is to find a gondola for each child.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Ferris Wheel"
  },
  "23": {
    "problem_statement": "<p>There are <span class=\"math inline\">n</span> concert tickets available, each with a certain price. Then, <span class=\"math inline\">m</span> customers arrive, one after another.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Concert Tickets"
  },
  "24": {
    "problem_statement": "<p>You are given the arrival and leaving times of <span class=\"math inline\">n</span> customers in a restaurant.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Restaurant Customers"
  },
  "25": {
    "problem_statement": "<p>In a movie festival <span class=\"math inline\">n</span> movies will be shown. You know the starting and ending time of each movie. What is the maximum number of movies you can watch entirely?</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Movie Festival"
  },
  "26": {
    "problem_statement": "<p>You are given an array of <span class=\"math inline\">n</span> integers, and your task is to find two values (at distinct positions) whose sum is <span class=\"math inline\">x</span>.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Sum of Two Values"
  },
  "27": {
    "problem_statement": "<p>Given an array of <span class=\"math inline\">n</span> integers, your task is to find the maximum sum of values in a contiguous, nonempty subarray.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Maximum Subarray Sum"
  },
  "28": {
    "problem_statement": "<p>There are <span class=\"math inline\">n</span> sticks with some lengths. Your task is to modify the sticks so that each stick has the same length.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Stick Lengths"
  },
  "29": {
    "problem_statement": "<p>You have <span class=\"math inline\">n</span> coins with positive integer values. What is the smallest sum you cannot create using a subset of the coins?</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Missing Coin Sum"
  },
  "30": {
    "problem_statement": "<p>You are given an array that contains each number between <span class=\"math inline\">1 \\dots n</span> exactly once. Your task is to collect the numbers from <span class=\"math inline\">1</span> to <span class=\"math inline\">n</span> in increasing order.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Collecting Numbers"
  },
  "31": {
    "problem_statement": "<p>You are given an array that contains each number between <span class=\"math inline\">1 \\dots n</span> exactly once. Your task is to collect the numbers from <span class=\"math inline\">1</span> to <span class=\"math inline\">n</span> in increasing order.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Collecting Numbers II"
  },
  "32": {
    "problem_statement": "<p>You are given a playlist of a radio station since its establishment. The playlist has a total of <span class=\"math inline\">n</span> songs.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Playlist"
  },
  "33": {
    "problem_statement": "<p>You are given <span class=\"math inline\">n</span> cubes in a certain order, and your task is to build towers using them. Whenever two cubes are one on top of the other, the upper cube must be smaller than the lower cube.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Towers"
  },
  "34": {
    "problem_statement": "<p>There is a street of length <span class=\"math inline\">x</span> whose positions are numbered <span class=\"math inline\">0,1,\\ldots,x</span>. Initially there are no traffic lights, but <span class=\"math inline\">n</span> sets of traffic lights are added to the street one after another.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Traffic Lights"
  },
  "35": {
    "problem_statement": "<p>Consider a game where there are <span class=\"math inline\">n</span> children (numbered <span class=\"math inline\">1,2,\\dots,n</span>) in a circle. During the game, every other child is removed from the circle until there are no children left. In which order will the children be removed?</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Josephus Problem I"
  },
  "36": {
    "problem_statement": "<p>Consider a game where there are <span class=\"math inline\">n</span> children (numbered <span class=\"math inline\">1,2,\\dots,n</span>) in a circle. During the game, repeatedly <span class=\"math inline\">k</span> children are skipped and one child is removed from the circle. In which order will the children be removed?</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Josephus Problem II"
  },
  "37": {
    "problem_statement": "<p>Given <span class=\"math inline\">n</span> ranges, your task is to determine for each range if it contains some other range and if some other range contains it.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Nested Ranges Check"
  },
  "38": {
    "problem_statement": "<p>Given <span class=\"math inline\">n</span> ranges, your task is to count for each range how many other ranges it contains and how many other ranges contain it.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Nested Ranges Count"
  },
  "39": {
    "problem_statement": "<p>There is a large hotel, and <span class=\"math inline\">n</span> customers will arrive soon. Each customer wants to have a single room.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Room Allocation"
  },
  "40": {
    "problem_statement": "<p>A factory has <span class=\"math inline\">n</span> machines which can be used to make products. Your goal is to make a total of <span class=\"math inline\">t</span> products.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Factory Machines"
  },
  "41": {
    "problem_statement": "<p>You have to process <span class=\"math inline\">n</span> tasks. Each task has a duration and a deadline, and you will process the tasks in some order one after another. Your reward for a task is <span class=\"math inline\">d-f</span> where <span class=\"math inline\">d</span> is its deadline and <span class=\"math inline\">f</span> is your finishing time. (The starting time is <span class=\"math inline\">0</span>, and you have to process all tasks even if a task would yield negative reward.)</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Tasks and Deadlines"
  },
  "42": {
    "problem_statement": "<p>There are <span class=\"math inline\">n</span> books, and Kotivalo and Justiina are going to read them all. For each book, you know the time it takes to read it.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Reading Books"
  },
  "43": {
    "problem_statement": "<p>You are given an array of <span class=\"math inline\">n</span> integers, and your task is to find three values (at distinct positions) whose sum is <span class=\"math inline\">x</span>.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Sum of Three Values"
  },
  "44": {
    "problem_statement": "<p>You are given an array of <span class=\"math inline\">n</span> integers, and your task is to find four values (at distinct positions) whose sum is <span class=\"math inline\">x</span>.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Sum of Four Values"
  },
  "45": {
    "problem_statement": "<p>Given an array of <span class=\"math inline\">n</span> integers, your task is to find for each array position the nearest position to its left having a smaller value.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Nearest Smaller Values"
  },
  "46": {
    "problem_statement": "<p>Given an array of <span class=\"math inline\">n</span> positive integers, your task is to count the number of subarrays having sum <span class=\"math inline\">x</span>.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Subarray Sums I"
  },
  "47": {
    "problem_statement": "<p>Given an array of <span class=\"math inline\">n</span> integers, your task is to count the number of subarrays having sum <span class=\"math inline\">x</span>.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Subarray Sums II"
  },
  "48": {
    "problem_statement": "<p>Given an array of <span class=\"math inline\">n</span> integers, your task is to count the number of subarrays where the sum of values is divisible by <span class=\"math inline\">n</span>.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Subarray Divisibility"
  },
  "49": {
    "problem_statement": "<p>Given an array of <span class=\"math inline\">n</span> integers, your task is to calculate the number of subarrays that have at most <span class=\"math inline\">k</span> distinct values.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Subarray Distinct Values"
  },
  "50": {
    "problem_statement": "<p>You are given an array containing <span class=\"math inline\">n</span> positive integers.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Array Division"
  },
  "51": {
    "problem_statement": "<p>You are given an array of <span class=\"math inline\">n</span> integers. Your task is to calculate the median of each window of <span class=\"math inline\">k</span> elements, from left to right.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Sliding Window Median"
  },
  "52": {
    "problem_statement": "<p>You are given an array of <span class=\"math inline\">n</span> integers. Your task is to calculate for each window of <span class=\"math inline\">k</span> elements, from left to right, the minimum total cost of making all elements equal.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Sliding Window Cost"
  },
  "53": {
    "problem_statement": "<p>In a movie festival, <span class=\"math inline\">n</span> movies will be shown. Syrj\u00e4l\u00e4's movie club consists of <span class=\"math inline\">k</span> members, who will be all attending the festival.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Movie Festival II"
  },
  "54": {
    "problem_statement": "<p>Given an array of <span class=\"math inline\">n</span> integers, your task is to find the maximum sum of values in a contiguous subarray with length between <span class=\"math inline\">a</span> and <span class=\"math inline\">b</span>.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Maximum Subarray Sum II"
  },
  "55": {
    "problem_statement": "<p>Your task is to count the number of ways to construct sum <span class=\"math inline\">n</span> by throwing a dice one or more times. Each throw produces an outcome between <span class=\"math inline\">1</span> and  <span class=\"math inline\">6</span>.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Dice Combinations"
  },
  "56": {
    "problem_statement": "<p>Consider a money system consisting of <span class=\"math inline\">n</span> coins. Each coin has a positive integer value. Your task is to produce a sum of money <span class=\"math inline\">x</span> using the available coins in such a way that the number of coins is minimal.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Minimizing Coins"
  },
  "57": {
    "problem_statement": "<p>Consider a money system consisting of <span class=\"math inline\">n</span> coins. Each coin has a positive integer value. Your task is to calculate the number of distinct ways you can produce a money sum <span class=\"math inline\">x</span> using the available coins.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Coin Combinations I"
  },
  "58": {
    "problem_statement": "<p>Consider a money system consisting of <span class=\"math inline\">n</span> coins. Each coin has a positive integer value. Your task is to calculate the number of distinct <em>ordered</em> ways you can produce a money sum <span class=\"math inline\">x</span> using the available coins.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Coin Combinations II"
  },
  "59": {
    "problem_statement": "<p>You are given an integer <span class=\"math inline\">n</span>. On each step, you may subtract one of the digits from the number.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Removing Digits"
  },
  "60": {
    "problem_statement": "<p>You are in a book shop which sells <span class=\"math inline\">n</span> different books. You know the price and number of pages of each book.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Book Shop"
  },
  "61": {
    "problem_statement": "<p>You know that an array has <span class=\"math inline\">n</span> integers between <span class=\"math inline\">1</span> and  <span class=\"math inline\">m</span>, and the absolute difference between two adjacent values is at most <span class=\"math inline\">1</span>.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Array Description"
  },
  "62": {
    "problem_statement": "<p>Your task is to build a tower whose width is <span class=\"math inline\">2</span> and height is <span class=\"math inline\">n</span>. You have an unlimited supply of blocks whose width and height are integers.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Counting Towers"
  },
  "63": {
    "problem_statement": "<p>The <em>edit distance</em> between two strings is the minimum number of operations required to transform one string into the other.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Edit Distance"
  },
  "64": {
    "problem_statement": "<p>Given an <span class=\"math inline\">a \\times b</span> rectangle, your task is to cut it into squares. On each move you can select a rectangle and cut it into two rectangles in such a way that all side lengths remain integers. What is the minimum possible number of moves?</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Rectangle Cutting"
  },
  "65": {
    "problem_statement": "<p>You have <span class=\"math inline\">n</span> coins with certain values. Your task is to find all money sums you can create using these coins.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Money Sums"
  },
  "66": {
    "problem_statement": "<p>There is a list of <span class=\"math inline\">n</span> numbers and two players who move alternately. On each move, a player removes either the first or last number from the list, and their score increases by that number. Both players try to maximize their scores.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Removal Game"
  },
  "67": {
    "problem_statement": "<p>Your task is to count the number of ways numbers <span class=\"math inline\">1,2,\\ldots,n</span> can be divided into two sets of equal sum.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Two Sets II"
  },
  "68": {
    "problem_statement": "<p>You are given an array containing <span class=\"math inline\">n</span> integers. Your task is to determine the longest increasing subsequence in the array, i.e., the longest subsequence where every element is larger than the previous one.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Increasing Subsequence"
  },
  "69": {
    "problem_statement": "<p>There are <span class=\"math inline\">n</span> projects you can attend. For each project, you know its starting and ending days and the amount of money you would get as reward. You can only attend one project during a day.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Projects"
  },
  "70": {
    "problem_statement": "<p>There are <span class=\"math inline\">n</span> people who want to get to the top of a building which has only one elevator. You know the weight of each person and the maximum allowed weight in the elevator. What is the minimum number of elevator rides?</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Elevator Rides"
  },
  "71": {
    "problem_statement": "<p>Your task is to count the number of ways you can fill an <span class=\"math inline\">n \\times m</span> grid using <span class=\"math inline\">1 \\times 2</span> and <span class=\"math inline\">2 \\times 1</span> tiles.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Counting Tilings"
  },
  "72": {
    "problem_statement": "<p>Your task is to count the number of integers between <span class=\"math inline\">a</span> and <span class=\"math inline\">b</span> where no two adjacent digits are the same.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Counting Numbers"
  },
  "73": {
    "problem_statement": "<p>You are given a map of a building, and your task is to count the number of its rooms. The size of the map is <span class=\"math inline\">n \\times m</span> squares, and each square is either floor or wall. You can walk left, right, up, and down through the floor squares.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Counting Rooms"
  },
  "74": {
    "problem_statement": "<p>You are given a map of a labyrinth, and your task is to find a path from start to end. You can walk left, right, up and down.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Labyrinth"
  },
  "75": {
    "problem_statement": "<p>Byteland has <span class=\"math inline\">n</span> cities, and <span class=\"math inline\">m</span> roads between them. The goal is to construct new roads so that there is a route between any two cities.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Building Roads"
  },
  "76": {
    "problem_statement": "<p>Syrj\u00e4l\u00e4's network has <span class=\"math inline\">n</span> computers and <span class=\"math inline\">m</span> connections. Your task is to find out if Uolevi can send a message to Maija, and if it is possible, what is the minimum number of computers on such a route.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Message Route"
  },
  "77": {
    "problem_statement": "<p>There are <span class=\"math inline\">n</span> pupils in Uolevi's class, and <span class=\"math inline\">m</span> friendships between them. Your task is to divide the pupils into two teams in such a way that no two pupils in a team are friends. You can freely choose the sizes of the teams.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Building Teams"
  },
  "78": {
    "problem_statement": "<p>Byteland has <span class=\"math inline\">n</span> cities and <span class=\"math inline\">m</span> roads between them. Your task is to design a round trip that begins in a city, goes through two or more other cities, and finally returns to the starting city. Every intermediate city on the route has to be distinct.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Round Trip"
  },
  "79": {
    "problem_statement": "<p>You and some monsters are in a labyrinth. When taking a step to some direction in the labyrinth, each monster may simultaneously take one as well. Your goal is to reach one of the boundary squares without ever sharing a square with a monster.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Monsters"
  },
  "80": {
    "problem_statement": "<p>There are <span class=\"math inline\">n</span> cities and <span class=\"math inline\">m</span> flight connections between them. Your task is to determine the length of the shortest route from Syrj\u00e4l\u00e4 to every city.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Shortest Routes I"
  },
  "81": {
    "problem_statement": "<p>There are <span class=\"math inline\">n</span> cities and <span class=\"math inline\">m</span> roads between them. Your task is to process <span class=\"math inline\">q</span> queries where you have to determine the length of the shortest route between two given cities.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Shortest Routes II"
  },
  "82": {
    "problem_statement": "<p>You play a game consisting of <span class=\"math inline\">n</span> rooms and <span class=\"math inline\">m</span> tunnels. Your initial score is <span class=\"math inline\">0</span>, and each tunnel increases your score by <span class=\"math inline\">x</span> where <span class=\"math inline\">x</span> may be both positive or negative. You may go through a tunnel several times.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "High Score"
  },
  "83": {
    "problem_statement": "<p>Your task is to find a minimum-price flight route from Syrj\u00e4l\u00e4 to Mets\u00e4l\u00e4. You have one discount coupon, using which you can halve the price of any single flight during the route. However, you can only use the coupon once.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Flight Discount"
  },
  "84": {
    "problem_statement": "<p>You are given a directed graph, and your task is to find out if it contains a negative cycle, and also give an example of such a cycle.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Cycle Finding"
  },
  "85": {
    "problem_statement": "<p>Your task is to find the <span class=\"math inline\">k</span> shortest flight routes from Syrj\u00e4l\u00e4 to Mets\u00e4l\u00e4. A route can visit the same city several times.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Flight Routes"
  },
  "86": {
    "problem_statement": "<p>Byteland has <span class=\"math inline\">n</span> cities and <span class=\"math inline\">m</span> flight connections. Your task is to design a round trip that begins in a city, goes through one or more other cities, and finally returns to the starting city. Every intermediate city on the route has to be distinct.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Round Trip II"
  },
  "87": {
    "problem_statement": "<p>You have to complete <span class=\"math inline\">n</span> courses. There are <span class=\"math inline\">m</span> requirements of the form \"course <span class=\"math inline\">a</span> has to be completed before course <span class=\"math inline\">b</span>\". Your task is to find an order in which you can complete the courses.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Course Schedule"
  },
  "88": {
    "problem_statement": "<p>Uolevi has won a contest, and the prize is a free flight trip that can consist of one or more flights through cities. Of course, Uolevi wants to choose a trip that has as many cities as possible.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Longest Flight Route"
  },
  "89": {
    "problem_statement": "<p>A game has <span class=\"math inline\">n</span> levels, connected by <span class=\"math inline\">m</span> teleporters, and your task is to get from level <span class=\"math inline\">1</span> to level <span class=\"math inline\">n</span>. The game has been designed so that there are no directed cycles in the underlying graph. In how many ways can you complete the game?</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Game Routes"
  },
  "90": {
    "problem_statement": "<p>You are going to travel from Syrj\u00e4l\u00e4 to Lehm\u00e4l\u00e4 by plane. You would like to find answers to the following questions:</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Investigation"
  },
  "91": {
    "problem_statement": "<p>You are playing a game consisting of <span class=\"math inline\">n</span> planets. Each planet has a teleporter to another planet (or the planet itself).</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Planets Queries I"
  },
  "92": {
    "problem_statement": "<p>You are playing a game consisting of n planets. Each planet has a teleporter to another planet (or the planet itself).</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Planets Queries II"
  },
  "93": {
    "problem_statement": "<p>You are playing a game consisting of <span class=\"math inline\">n</span> planets. Each planet has a teleporter to another planet (or the planet itself).</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Planets Cycles"
  },
  "94": {
    "problem_statement": "<p>There are <span class=\"math inline\">n</span> cities and <span class=\"math inline\">m</span> roads between them. Unfortunately, the condition of the roads is so poor that they cannot be used. Your task is to repair some of the roads so that there will be a decent route between any two cities.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Road Reparation"
  },
  "95": {
    "problem_statement": "<p>There are <span class=\"math inline\">n</span> cities and initially no roads between them. However, every day a new road will be constructed, and there will be a total of <span class=\"math inline\">m</span> roads.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Road Construction"
  },
  "96": {
    "problem_statement": "<p>There are <span class=\"math inline\">n</span> cities and <span class=\"math inline\">m</span> flight connections. Your task is to check if you can travel from any city to any other city using the available flights.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Flight Routes Check"
  },
  "97": {
    "problem_statement": "<p>A game has <span class=\"math inline\">n</span> planets, connected by <span class=\"math inline\">m</span> teleporters. Two planets <span class=\"math inline\">a</span> and <span class=\"math inline\">b</span> belong to the same kingdom exactly when there is a route both from <span class=\"math inline\">a</span> to <span class=\"math inline\">b</span> and from <span class=\"math inline\">b</span> to <span class=\"math inline\">a</span>. Your task is to determine for each planet its kingdom.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Planets and Kingdoms"
  },
  "98": {
    "problem_statement": "<p>Uolevi's family is going to order a large pizza and eat it together. A total of <span class=\"math inline\">n</span> family members will join the order, and there are <span class=\"math inline\">m</span> possible toppings. The pizza may have any number of toppings.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Giant Pizza"
  },
  "99": {
    "problem_statement": "<p>A game has <span class=\"math inline\">n</span> rooms and <span class=\"math inline\">m</span> tunnels between them. Each room has a certain number of coins. What is the maximum number of coins you can collect while moving through the tunnels when you can freely choose your starting and ending room?</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Coin Collector"
  },
  "100": {
    "problem_statement": "<p>Your task is to deliver mail to the inhabitants of a city. For this reason, you want to find a route whose starting and ending point are the post office, and that goes through every street exactly once.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Mail Delivery"
  },
  "101": {
    "problem_statement": "<p>Your task is to construct a minimum-length bit string that contains all possible substrings of length <span class=\"math inline\">n</span>. For example, when <span class=\"math inline\">n=2</span>, the string 00110 is a valid solution, because its substrings of length <span class=\"math inline\">2</span> are 00, 01, 10 and 11.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "De Bruijn Sequence"
  },
  "102": {
    "problem_statement": "<p>A game has <span class=\"math inline\">n</span> levels and <span class=\"math inline\">m</span> teleportes between them. You win the game if you move from level <span class=\"math inline\">1</span> to level <span class=\"math inline\">n</span> using every teleporter exactly once.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Teleporters Path"
  },
  "103": {
    "problem_statement": "<p>There are <span class=\"math inline\">n</span> cities and <span class=\"math inline\">m</span> flight connections between them. You want to travel from Syrj\u00e4l\u00e4 to Lehm\u00e4l\u00e4 so that you visit each city exactly once. How many possible routes are there?</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Hamiltonian Flights"
  },
  "104": {
    "problem_statement": "<p>Given a starting position of a knight on an <span class=\"math inline\">8 \\times 8</span> chessboard, your task is to find a sequence of moves such that it visits every square exactly once.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Knight's Tour"
  },
  "105": {
    "problem_statement": "<p>Consider a network consisting of <span class=\"math inline\">n</span> computers and <span class=\"math inline\">m</span> connections. Each connection specifies how fast a computer can send data to another computer.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Download Speed"
  },
  "106": {
    "problem_statement": "<p>Kaaleppi has just robbed a bank and is now heading to the harbor. However, the police wants to stop him by closing some streets of the city.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Police Chase"
  },
  "107": {
    "problem_statement": "<p>There are <span class=\"math inline\">n</span> boys and <span class=\"math inline\">m</span> girls in a school. Next week a school dance will be organized. A dance pair consists of a boy and a girl, and there are <span class=\"math inline\">k</span> potential pairs.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "School Dance"
  },
  "108": {
    "problem_statement": "<p>A game consists of <span class=\"math inline\">n</span> rooms and <span class=\"math inline\">m</span> teleporters. At the beginning of each day, you start in room <span class=\"math inline\">1</span> and you have to reach room <span class=\"math inline\">n</span>.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Distinct Routes"
  },
  "109": {
    "problem_statement": "<p>Given an array of <span class=\"math inline\">n</span> integers, your task is to process <span class=\"math inline\">q</span> queries of the form: what is the sum of values in range <span class=\"math inline\">[a,b]</span>?</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Static Range Sum Queries"
  },
  "110": {
    "problem_statement": "<p>Given an array of <span class=\"math inline\">n</span> integers, your task is to process <span class=\"math inline\">q</span> queries of the form: what is the minimum value in range <span class=\"math inline\">[a,b]</span>?</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Static Range Minimum Queries"
  },
  "111": {
    "problem_statement": "<p>Given an array of <span class=\"math inline\">n</span> integers, your task is to process <span class=\"math inline\">q</span> queries of the following types:</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Dynamic Range Sum Queries"
  },
  "112": {
    "problem_statement": "<p>Given an array of <span class=\"math inline\">n</span> integers, your task is to process <span class=\"math inline\">q</span> queries of the following types:</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Dynamic Range Minimum Queries"
  },
  "113": {
    "problem_statement": "<p>Given an array of <span class=\"math inline\">n</span> integers, your task is to process <span class=\"math inline\">q</span> queries of the form: what is the xor sum of values in range <span class=\"math inline\">[a,b]</span>?</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Range Xor Queries"
  },
  "114": {
    "problem_statement": "<p>Given an array of <span class=\"math inline\">n</span> integers, your task is to process <span class=\"math inline\">q</span> queries of the following types:</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Range Update Queries"
  },
  "115": {
    "problem_statement": "<p>You are given an <span class=\"math inline\">n \\times n</span> grid representing the map of a forest. Each square is either empty or contains a tree. The upper-left square has coordinates <span class=\"math inline\">(1,1)</span>, and the lower-right square has coordinates <span class=\"math inline\">(n,n)</span>.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Forest Queries"
  },
  "116": {
    "problem_statement": "<p>There are <span class=\"math inline\">n</span> hotels on a street. For each hotel you know the number of free rooms. Your task is to assign hotel rooms for groups of tourists. All members of a group want to stay in the same hotel.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Hotel Queries"
  },
  "117": {
    "problem_statement": "<p>You are given a list consisting of <span class=\"math inline\">n</span> integers. Your task is to remove elements from the list at given positions, and report the removed elements.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "List Removals"
  },
  "118": {
    "problem_statement": "<p>A company has <span class=\"math inline\">n</span> employees with certain salaries. Your task is to keep track of the salaries and process queries.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Salary Queries"
  },
  "119": {
    "problem_statement": "<p>Given an array of <span class=\"math inline\">n</span> integers, your task is to process <span class=\"math inline\">q</span> queries of the following types:</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Prefix Sum Queries"
  },
  "120": {
    "problem_statement": "<p>There are <span class=\"math inline\">n</span> buildings on a street, numbered <span class=\"math inline\">1,2,\\dots,n</span>. Each building has a pizzeria and an apartment.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Pizzeria Queries"
  },
  "121": {
    "problem_statement": "<p>There is an array consisting of <span class=\"math inline\">n</span> integers. Some values of the array will be updated, and after each update, your task is to report the maximum subarray sum in the array. </p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Subarray Sum Queries"
  },
  "122": {
    "problem_statement": "<p>You are given an array of <span class=\"math inline\">n</span> integers and <span class=\"math inline\">q</span> queries of the form: how many distinct values are there in a range <span class=\"math inline\">[a,b]</span>?</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Distinct Values Queries"
  },
  "123": {
    "problem_statement": "<p>You are given an array that consists of <span class=\"math inline\">n</span> integers. The array elements are indexed <span class=\"math inline\">1,2,\\dots,n</span>.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Increasing Array Queries"
  },
  "124": {
    "problem_statement": "<p>You are given an <span class=\"math inline\">n \\times n</span> grid representing the map of a forest. Each square is either empty or has a tree. Your task is to process <span class=\"math inline\">q</span> queries of the following types:</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Forest Queries II"
  },
  "125": {
    "problem_statement": "<p>Your task is to maintain an array of <span class=\"math inline\">n</span> values and efficiently process the following types of queries:</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Range Updates and Sums"
  },
  "126": {
    "problem_statement": "<p>Your task is to maintain an array of <span class=\"math inline\">n</span> values and efficiently process the following types of queries:</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Polynomial Queries"
  },
  "127": {
    "problem_statement": "<p>Your task is to maintain a list of arrays which initially has a single array. You have to process the following types of queries:</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Range Queries and Copies"
  },
  "128": {
    "problem_statement": "<p>Given the structure of a company, your task is to calculate for each employee the number of their subordinates.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Subordinates"
  },
  "129": {
    "problem_statement": "<p>You are given a tree consisting of <span class=\"math inline\">n</span> nodes.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Tree Matching"
  },
  "130": {
    "problem_statement": "<p>You are given a tree consisting of <span class=\"math inline\">n</span> nodes.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Tree Diameter"
  },
  "131": {
    "problem_statement": "<p>You are given a tree consisting of <span class=\"math inline\">n</span> nodes.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Tree Distances I"
  },
  "132": {
    "problem_statement": "<p>You are given a tree consisting of <span class=\"math inline\">n</span> nodes.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Tree Distances II"
  },
  "133": {
    "problem_statement": "<p>A company has <span class=\"math inline\">n</span> employees, who form a tree hierarchy where each employee has a boss, except for the general director.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Company Queries I"
  },
  "134": {
    "problem_statement": "<p>A company has <span class=\"math inline\">n</span> employees, who form a tree hierarchy where each employee has a boss, except for the general director.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Company Queries II"
  },
  "135": {
    "problem_statement": "<p>You are given a tree consisting of <span class=\"math inline\">n</span> nodes.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Distance Queries"
  },
  "136": {
    "problem_statement": "<p>You are given a tree consisting of <span class=\"math inline\">n</span> nodes, and <span class=\"math inline\">m</span> paths in the tree.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Counting Paths"
  },
  "137": {
    "problem_statement": "<p>You are given a rooted tree consisting of <span class=\"math inline\">n</span> nodes. The nodes are numbered <span class=\"math inline\">1,2,\\ldots,n</span>, and node <span class=\"math inline\">1</span> is the root. Each node has a value.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Subtree Queries"
  },
  "138": {
    "problem_statement": "<p>You are given a rooted tree consisting of <span class=\"math inline\">n</span> nodes. The nodes are numbered <span class=\"math inline\">1,2,\\ldots,n</span>, and node <span class=\"math inline\">1</span> is the root. Each node has a value.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Path Queries"
  },
  "139": {
    "problem_statement": "<p>You are given a tree consisting of <span class=\"math inline\">n</span> nodes. The nodes are numbered <span class=\"math inline\">1,2,\\ldots,n</span>. Each node has a value.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Path Queries II"
  },
  "140": {
    "problem_statement": "<p>You are given a rooted tree consisting of <span class=\"math inline\">n</span> nodes. The nodes are numbered <span class=\"math inline\">1,2,\\ldots,n</span>, and node <span class=\"math inline\">1</span> is the root. Each node has a color.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Distinct Colors"
  },
  "141": {
    "problem_statement": "<p>Given a tree of <span class=\"math inline\">n</span> nodes, your task is to find a <em>centroid</em>, i.e., a node such that when it is appointed the root of the tree, each subtree has at most <span class=\"math inline\">\\lfloor n/2 \\rfloor</span> nodes.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Finding a Centroid"
  },
  "142": {
    "problem_statement": "<p>Given a tree of <span class=\"math inline\">n</span> nodes, your task is to count the number of distinct paths that consist of exactly <span class=\"math inline\">k</span> edges.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Fixed-Length Paths I"
  },
  "143": {
    "problem_statement": "<p>Given a tree of <span class=\"math inline\">n</span> nodes, your task is to count the number of distinct paths that have at least <span class=\"math inline\">k_1</span> and at most <span class=\"math inline\">k_2</span> edges.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Fixed-Length Paths II"
  },
  "144": {
    "problem_statement": "<p>Consider a game where there are <span class=\"math inline\">n</span> children (numbered <span class=\"math inline\">1,2,\\dots,n</span>) in a circle. During the game, every second child is removed from the circle, until there are no children left.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Josephus Queries"
  },
  "145": {
    "problem_statement": "<p>Your task is to efficiently calculate values <span class=\"math inline\">a^b</span> modulo <span class=\"math inline\">10^9+7</span>.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Exponentiation"
  },
  "146": {
    "problem_statement": "<p>Your task is to efficiently calculate values <span class=\"math inline\">a^{b^c}</span> modulo <span class=\"math inline\">10^9+7</span>.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Exponentiation II"
  },
  "147": {
    "problem_statement": "<p>Given <span class=\"math inline\">n</span> integers, your task is to report for each integer the number of its divisors.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Counting Divisors"
  },
  "148": {
    "problem_statement": "<p>You are given an array of <span class=\"math inline\">n</span> positive integers. Your task is to find two integers such that their greatest common divisor is as large as possible.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Common Divisors"
  },
  "149": {
    "problem_statement": "<p>Let <span class=\"math inline\">\\sigma(n)</span> denote the sum of divisors of an integer <span class=\"math inline\">n</span>. For example, <span class=\"math inline\">\\sigma(12)=1+2+3+4+6+12=28</span>.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Sum of Divisors"
  },
  "150": {
    "problem_statement": "<p>Given an integer, your task is to find the number, sum and product of its divisors. As an example, let us consider the number <span class=\"math inline\">12</span>:</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Divisor Analysis"
  },
  "151": {
    "problem_statement": "<p>You are given <span class=\"math inline\">k</span> distinct prime numbers <span class=\"math inline\">a_1,a_2,\\ldots,a_k</span> and an integer <span class=\"math inline\">n</span>.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Prime Multiples"
  },
  "152": {
    "problem_statement": "<p>Given a list of <span class=\"math inline\">n</span> positive integers, your task is to count the number of pairs of integers that are coprime (i.e., their greatest common divisor is one).</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Counting Coprime Pairs"
  },
  "153": {
    "problem_statement": "<p>Your task is to calculate <span class=\"math inline\">n</span> binomial coefficients modulo <span class=\"math inline\">10^9+7</span>.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Binomial Coefficients"
  },
  "154": {
    "problem_statement": "<p>Given a string, your task is to calculate the number of different strings that can be created using its characters.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Creating Strings II"
  },
  "155": {
    "problem_statement": "<p>There are <span class=\"math inline\">n</span> children and <span class=\"math inline\">m</span> apples that will be distributed to them. Your task is to count the number of ways this can be done.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Distributing Apples"
  },
  "156": {
    "problem_statement": "<p>There are <span class=\"math inline\">n</span> children at a Christmas party, and each of them has brought a gift. The idea is that everybody will get a gift brought by someone else.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Christmas Party"
  },
  "157": {
    "problem_statement": "<p>Your task is to calculate the number of valid bracket sequences of length <span class=\"math inline\">n</span>. For example, when <span class=\"math inline\">n=6</span>, there are <span class=\"math inline\">5</span> sequences:</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Bracket Sequences I"
  },
  "158": {
    "problem_statement": "<p>Your task is to calculate the number of valid bracket sequences of length <span class=\"math inline\">n</span> when a <em>prefix</em> of the sequence is given.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Bracket Sequences II"
  },
  "159": {
    "problem_statement": "<p>Your task is to count the number of different necklaces that consist of <span class=\"math inline\">n</span> pearls and each pearl has <span class=\"math inline\">m</span> possible colors.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Counting Necklaces"
  },
  "160": {
    "problem_statement": "<p>Your task is to count the number of different <span class=\"math inline\">n \\times n</span> grids whose each square is black or white.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Counting Grids"
  },
  "161": {
    "problem_statement": "<p>The Fibonacci numbers can be defined as follows:</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Fibonacci Numbers"
  },
  "162": {
    "problem_statement": "<p>Your task is to calculate the number of ways to get a sum <span class=\"math inline\">n</span> by throwing dice. Each throw yields an integer between <span class=\"math inline\">1 \\ldots 6</span>.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Throwing Dice"
  },
  "163": {
    "problem_statement": "<p>Consider a directed graph that has <span class=\"math inline\">n</span> nodes and <span class=\"math inline\">m</span> edges. Your task is to count the number of paths from node <span class=\"math inline\">1</span> to node <span class=\"math inline\">n</span> with exactly <span class=\"math inline\">k</span> edges.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Graph Paths I"
  },
  "164": {
    "problem_statement": "<p>Consider a directed weighted graph having <span class=\"math inline\">n</span> nodes and <span class=\"math inline\">m</span> edges. Your task is to calculate the minimum path length from node <span class=\"math inline\">1</span> to node <span class=\"math inline\">n</span> with exactly <span class=\"math inline\">k</span> edges.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Graph Paths II"
  },
  "165": {
    "problem_statement": "<p>You throw a dice <span class=\"math inline\">n</span> times, and every throw produces an outcome between <span class=\"math inline\">1</span> and <span class=\"math inline\">6</span>. What is the probability that the sum of outcomes is between <span class=\"math inline\">a</span> and <span class=\"math inline\">b</span>?</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Dice Probability"
  },
  "166": {
    "problem_statement": "<p>Each square of an <span class=\"math inline\">8 \\times 8</span> chessboard has a robot. Each robot independently moves <span class=\"math inline\">k</span> steps, and there can be many robots on the same square.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Moving Robots"
  },
  "167": {
    "problem_statement": "<p>There are <span class=\"math inline\">n</span> children, and each of them independently gets a random integer number of candies between <span class=\"math inline\">1</span> and <span class=\"math inline\">k</span>.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Candy Lottery"
  },
  "168": {
    "problem_statement": "<p>An array has <span class=\"math inline\">n</span> integers <span class=\"math inline\">x_1,x_2,\\dots,x_n</span>, and each of them has been randomly chosen between <span class=\"math inline\">1</span> and <span class=\"math inline\">r_i</span>. An inversion is a pair <span class=\"math inline\">(a,b)</span> where <span class=\"math inline\">a&lt;b</span> and <span class=\"math inline\">x_a&gt;x_b</span>.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Inversion Probability"
  },
  "169": {
    "problem_statement": "<p>Consider a game where two players remove sticks from a heap. The players move alternately, and the player who removes the last stick wins the game.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Stick Game"
  },
  "170": {
    "problem_statement": "<p>There are <span class=\"math inline\">n</span> heaps of sticks and two players who move alternately. On each move, a player chooses a non-empty heap and removes any number of sticks. The player who removes the last stick wins the game.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Nim Game I"
  },
  "171": {
    "problem_statement": "<p>There are <span class=\"math inline\">n</span> heaps of sticks and two players who move alternately. On each move, a player chooses a non-empty heap and removes <span class=\"math inline\">1</span>, <span class=\"math inline\">2</span>, or <span class=\"math inline\">3</span> sticks. The player who removes the last stick wins the game.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Nim Game II"
  },
  "172": {
    "problem_statement": "<p>There is a staircase consisting of <span class=\"math inline\">n</span> stairs, numbered <span class=\"math inline\">1,2,\\ldots,n</span>. Initially, each stair has some number of balls.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Stair Game"
  },
  "173": {
    "problem_statement": "<p>There is a heap of <span class=\"math inline\">n</span> coins and two players who move alternately. On each move, a player chooses a heap and divides into two nonempty heaps that have a different number of coins. The player who makes the last move wins the game.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Grundy's Game"
  },
  "174": {
    "problem_statement": "<p>There are <span class=\"math inline\">n</span> heaps of coins and two players who move alternately. On each move, a player selects some of the nonempty heaps and removes one coin from each heap. The player who removes the last coin wins the game.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Another Game"
  },
  "175": {
    "problem_statement": "<p>You are given a string of length <span class=\"math inline\">n</span> and a dictionary containing <span class=\"math inline\">k</span> words. In how many ways can you create the string using the words?</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Word Combinations"
  },
  "176": {
    "problem_statement": "<p>Given a string and a pattern, your task is to count the number of positions where the pattern occurs in the string.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "String Matching"
  },
  "177": {
    "problem_statement": "<p>A <em>border</em> of a string is a prefix that is also a suffix of the string but not the whole string. For example, the borders of <code>abcababcab</code> are <code>ab</code> and <code>abcab</code>.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Finding Borders"
  },
  "178": {
    "problem_statement": "<p>A <em>period</em> of a string is a prefix that can be used to generate the whole string by repeating the prefix. The last repetition may be partial. For example, the periods of <code>abcabca</code> are <code>abc</code>, <code>abcabc</code> and <code>abcabca</code>.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Finding Periods"
  },
  "179": {
    "problem_statement": "<p>A rotation of a string can be generated by moving characters one after another from beginning to end. For example, the rotations of <code>acab</code> are <code>acab</code>, <code>caba</code>, <code>abac</code>, and <code>baca</code>.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Minimal Rotation"
  },
  "180": {
    "problem_statement": "<p>Given a string, your task is to determine the longest palindromic substring of the string. For example, the longest palindrome in <code>aybabtu</code> is <code>bab</code>.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Longest Palindrome"
  },
  "181": {
    "problem_statement": "<p>Your task is to calculate the number of strings of length <span class=\"math inline\">n</span> having a given pattern of length <span class=\"math inline\">m</span> as their substring. All strings consist of characters A\u2013Z.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Required Substring"
  },
  "182": {
    "problem_statement": "<p>You are given a string that consists of <span class=\"math inline\">n</span> characters between a\u2013z. The positions of the string are indexed <span class=\"math inline\">1,2,\\dots,n</span>.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Palindrome Queries"
  },
  "183": {
    "problem_statement": "<p>Given a string and patterns, check for each pattern if it appears in the string.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Finding Patterns"
  },
  "184": {
    "problem_statement": "<p>Given a string and patterns, count for each pattern the number of positions where it appears in the string.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Counting Patterns"
  },
  "185": {
    "problem_statement": "<p>Given a string and patterns, find for each pattern the first position (1-indexed) where it appears in the string.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Pattern Positions"
  },
  "186": {
    "problem_statement": "<p>Count the number of distinct substrings that appear in a string.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Distinct Substrings"
  },
  "187": {
    "problem_statement": "<p>A repeating substring is a substring that occurs in two (or more) locations in the string. Your task is to find the longest repeating substring in a given string.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Repeating Substring"
  },
  "188": {
    "problem_statement": "<p>We consider a string of <span class=\"math inline\">n</span> characters, indexed <span class=\"math inline\">1,2,\\dots,n</span>. Your task is to calculate all values of the following functions:</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "String Functions"
  },
  "189": {
    "problem_statement": "<p>You are given a string of length <span class=\"math inline\">n</span>. If all of its distinct substrings are ordered lexicographically, what is the <span class=\"math inline\">k</span>th smallest of them?</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Substring Order I"
  },
  "190": {
    "problem_statement": "<p>You are given a string of length <span class=\"math inline\">n</span>. If all of its substrings (not necessarily distinct) are ordered lexicographically, what is the <span class=\"math inline\">k</span>th smallest of them?</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Substring Order II"
  },
  "191": {
    "problem_statement": "<p>You are given a string of length <span class=\"math inline\">n</span>. For every integer between <span class=\"math inline\">1 \\ldots n</span> you need to print the number of distinct substrings of that length.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Substring Distribution"
  },
  "192": {
    "problem_statement": "<p>There is a line that goes through the points <span class=\"math inline\">p_1=(x_1,y_1)</span> and <span class=\"math inline\">p_2=(x_2,y_2)</span>. There is also a point <span class=\"math inline\">p_3=(x_3,y_3)</span>.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Point Location Test"
  },
  "193": {
    "problem_statement": "<p>There are two line segments: the first goes through the points <span class=\"math inline\">(x_1,y_1)</span> and <span class=\"math inline\">(x_2,y_2)</span>, and the second goes through the points <span class=\"math inline\">(x_3,y_3)</span> and <span class=\"math inline\">(x_4,y_4)</span>.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Line Segment Intersection"
  },
  "194": {
    "problem_statement": "<p>Your task is to calculate the area of a given polygon.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Polygon Area"
  },
  "195": {
    "problem_statement": "<p>You are given a polygon of <span class=\"math inline\">n</span> vertices and a list of <span class=\"math inline\">m</span> points. Your task is to determine for each point if it is inside, outside or on the boundary of the polygon.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Point in Polygon"
  },
  "196": {
    "problem_statement": "<p>Given a polygon, your task is to calculate the number of lattice points inside the polygon and on its boundary. A lattice point is a point whose coordinates are integers.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Polygon Lattice Points"
  },
  "197": {
    "problem_statement": "<p>Given a set of points in the two-dimensional plane, your task is to find the minimum Euclidean distance between two distinct points.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Minimum Euclidean Distance"
  },
  "198": {
    "problem_statement": "<p>Given a set of <span class=\"math inline\">n</span> points in the two-dimensional plane, your task is to determine the convex hull of the points.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Convex Hull"
  },
  "199": {
    "problem_statement": "<p>You are given an array of <span class=\"math inline\">n</span> numbers. In how many ways can you choose a subset of the numbers with sum <span class=\"math inline\">x</span>?</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Meet in the Middle"
  },
  "200": {
    "problem_statement": "<p>The Hamming distance between two strings <span class=\"math inline\">a</span> and <span class=\"math inline\">b</span> of equal length is the number of positions where the strings differ.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Hamming Distance"
  },
  "201": {
    "problem_statement": "<p>You are given an <span class=\"math inline\">n \\times n</span> grid whose each square is either black or white. A subgrid is called <em>beautiful</em> if its height and width is at least two and all of its corners are black. How many beautiful subgrids are there within the given grid?</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Beautiful Subgrids"
  },
  "202": {
    "problem_statement": "<p>A directed acyclic graph consists of <span class=\"math inline\">n</span> nodes and <span class=\"math inline\">m</span> edges. The nodes are numbered <span class=\"math inline\">1,2,\\dots,n</span>.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Reachable Nodes"
  },
  "203": {
    "problem_statement": "<p>A directed graph consists of <span class=\"math inline\">n</span> nodes and <span class=\"math inline\">m</span> edges. The edges are numbered <span class=\"math inline\">1,2,\\dots,n</span>.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Reachability Queries"
  },
  "204": {
    "problem_statement": "<p>Given a string, your task is to process operations where you cut a substring and paste it to the end of the string. What is the final string after all the operations?</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Cut and Paste"
  },
  "205": {
    "problem_statement": "<p>Given a string, your task is to process operations where you reverse a substring of the string. What is the final string after all the operations?</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Substring Reversals"
  },
  "206": {
    "problem_statement": "<p>Given an array of <span class=\"math inline\">n</span> integers, you have to process following operations:</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Reversals and Sums"
  },
  "207": {
    "problem_statement": "<p>There are <span class=\"math inline\">n</span> cities and <span class=\"math inline\">m</span> roads between them. There is a route between any two cities.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Necessary Roads"
  },
  "208": {
    "problem_statement": "<p>There are <span class=\"math inline\">n</span> cities and <span class=\"math inline\">m</span> roads between them. There is a route between any two cities.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Necessary Cities"
  },
  "209": {
    "problem_statement": "<p>You are given an undirected graph that has <span class=\"math inline\">n</span> nodes and <span class=\"math inline\">m</span> edges.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Eulerian Subgraphs"
  },
  "210": {
    "problem_statement": "<p>You are playing a game that consists of <span class=\"math inline\">n</span> levels. Each level has a monster. On levels <span class=\"math inline\">1,2,\\dots,n-1</span>, you can either kill or escape the monster. However, on level <span class=\"math inline\">n</span> you must kill the final monster to win the game.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Monster Game I"
  },
  "211": {
    "problem_statement": "<p>You are playing a game that consists of <span class=\"math inline\">n</span> levels. Each level has a monster. On levels <span class=\"math inline\">1,2,\\dots,n-1</span>, you can either kill or escape the monster. However, on level <span class=\"math inline\">n</span> you must kill the final monster to win the game.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Monster Game II"
  },
  "212": {
    "problem_statement": "<p>Given an array of <span class=\"math inline\">n</span> elements, your task is to divide into <span class=\"math inline\">k</span> subarrays. The cost of each subarray is the square of the sum of the values in the subarray. What is the minimum total cost if you act optimally?</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Subarray Squares"
  },
  "213": {
    "problem_statement": "<p>There are <span class=\"math inline\">n</span> houses on a street, numbered <span class=\"math inline\">1,2,\\dots,n</span>. The distance of houses <span class=\"math inline\">a</span> and <span class=\"math inline\">b</span> is <span class=\"math inline\">|a-b|</span>. You know the number of children in each house.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Houses and Schools"
  },
  "214": {
    "problem_statement": "<p>Given an array of <span class=\"math inline\">n</span> numbers, your task is to divide it into <span class=\"math inline\">n</span> subarrays, each of which has a single element.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Knuth Division"
  },
  "215": {
    "problem_statement": "<p>There are <span class=\"math inline\">n</span> apples and <span class=\"math inline\">m</span> bananas, and each of them has an integer weight between <span class=\"math inline\">1 \\ldots k</span>. Your task is to calculate, for each weight <span class=\"math inline\">w</span> between <span class=\"math inline\">2 \\dots 2k</span>, the number of ways we can choose an apple and a banana whose combined weight is <span class=\"math inline\">w</span>.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Apples and Bananas"
  },
  "216": {
    "problem_statement": "<p>You are given a binary string of length <span class=\"math inline\">n</span>. Your task is to calculate, for every <span class=\"math inline\">k</span> between <span class=\"math inline\">1 \\ldots n-1</span>, the number of ways we can choose two positions <span class=\"math inline\">i</span> and <span class=\"math inline\">j</span> such that <span class=\"math inline\">i-j=k</span> and there is a one-bit at both positions.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "One Bit Positions"
  },
  "217": {
    "problem_statement": "<p>You are given two integer sequences: a signal and a mask. Your task is to process the signal by moving the mask through the signal from left to right. At each mask position calculate the sum of products of aligned signal and mask values in the part where the signal and the mask overlap.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Signal Processing"
  },
  "218": {
    "problem_statement": "<p>There are <span class=\"math inline\">n</span> cities in Byteland but no roads between them. However, each day, a new road will be built. There will be a total of <span class=\"math inline\">m</span> roads.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "New Roads Queries"
  },
  "219": {
    "problem_statement": "<p>Consider an undirected graph that consists of <span class=\"math inline\">n</span> nodes and <span class=\"math inline\">m</span> edges. There are two types of events that can happen:</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Dynamic Connectivity"
  },
  "220": {
    "problem_statement": "<p>There are <span class=\"math inline\">n</span> cities and <span class=\"math inline\">m</span> routes through which parcels can be carried from one city to another city. For each route, you know the maximum number of parcels and the cost of a single parcel.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Parcel Delivery"
  },
  "221": {
    "problem_statement": "<p>A company has <span class=\"math inline\">n</span> employees and there are <span class=\"math inline\">n</span> tasks that need to be done. We know for each employee the cost of carrying out each task. Every employee should be assigned to exactly one task. What is the minimum total cost if we assign the tasks optimally and how could they be assigned?</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Task Assignment"
  },
  "222": {
    "problem_statement": "<p>A game consists of <span class=\"math inline\">n</span> rooms and <span class=\"math inline\">m</span> teleporters. At the beginning of each day, you start in room <span class=\"math inline\">1</span> and you have to reach room <span class=\"math inline\">n</span>.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Distinct Routes II"
  },
  "223": {
    "problem_statement": "<p>You are given a DNA sequence consisting of characters A, C, G, and T.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Shortest Subsequence"
  },
  "224": {
    "problem_statement": "<p>Your task is to count the number of one bits in the binary representations of integers between <span class=\"math inline\">1</span> and <span class=\"math inline\">n</span>.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Counting Bits"
  },
  "225": { "error": "", "problem_title": "Swap Game" },
  "226": {
    "problem_statement": "<p>A <em>Pr\u00fcfer code</em> of a tree of <span class=\"math inline\">n</span> nodes is a sequence of <span class=\"math inline\">n-2</span> integers that uniquely specifies the structure of the tree.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Pr\u00fcfer Code"
  },
  "227": {
    "problem_statement": "<p>Given an undirected graph, your task is to choose a direction for each edge so that the resulting directed graph is acyclic.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Acyclic Graph Edges"
  },
  "228": {
    "problem_statement": "<p>Given an undirected graph, your task is to choose a direction for each edge so that the resulting directed graph is strongly connected.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Strongly Connected Edges"
  },
  "229": {
    "problem_statement": "<p>Given an undirected graph, your task is to choose a direction for each edge so that in the resulting directed graph each node has an even outdegree. The outdegree of a node is the number of edges coming out of that node.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Even Outdegree Edges"
  },
  "230": {
    "problem_statement": "<p>Find the middle element when the numbers in an <span class=\"math inline\">n \\times n</span> multiplication table are sorted in increasing order. It is assumed that <span class=\"math inline\">n</span> is odd.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Multiplication Table"
  },
  "231": {
    "problem_statement": "<p>A fence consists of <span class=\"math inline\">n</span> vertical boards. The width of each board is 1 and their heights may vary.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Advertisement"
  },
  "232": {
    "problem_statement": "<p>A substring is called <em>special</em> if every character that appears in the string appears the same number of times in the substring.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Special Substrings"
  },
  "233": {
    "problem_statement": "<p>Your task is to count the number of permutations of <span class=\"math inline\">1,2,\\dots,n</span> that have exactly <span class=\"math inline\">k</span> inversions (i.e., pairs of elements in the wrong order).</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Permutation Inversions"
  },
  "234": {
    "problem_statement": "<p>Given an array of <span class=\"math inline\">n</span> integers, your task is to find the maximum xor sum in a subarray.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Maximum Xor Subarray"
  },
  "235": {
    "problem_statement": "<p>In a movie festival, <span class=\"math inline\">n</span> movies will be shown. You know the starting and ending time of each movie.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Movie Festival Queries"
  },
  "236": {
    "problem_statement": "<p>There will be a chess tournament of <span class=\"math inline\">n</span> players. Each player has announced the number of games they want to play.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Chess Tournament"
  },
  "237": {
    "problem_statement": "<p>There are three common ways to traverse the nodes of a binary tree:</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Tree Traversals"
  },
  "238": {
    "problem_statement": "<p>Syrj\u00e4l\u00e4's network consists of <span class=\"math inline\">n</span> computers and <span class=\"math inline\">n-1</span> connections between them. It is possible to send data between any two computers.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Network Renovation"
  },
  "239": {
    "problem_statement": "<p>Given an undirected graph, your task is to determine its <em>girth</em>, i.e., the length of its shortest cycle.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Graph Girth"
  },
  "240": {
    "problem_statement": "<p>Given <span class=\"math inline\">n</span> horizontal and vertical line segments, your task is to calculate the number of their intersection points.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Intersection Points"
  },
  "241": {
    "problem_statement": "<p>Your task is to create a permutation of numbers <span class=\"math inline\">1,2,\\dots,n</span> that has exactly <span class=\"math inline\">k</span> inversions.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Inverse Inversions"
  },
  "242": {
    "problem_statement": "<p>Your task is to create a permutation of numbers <span class=\"math inline\">1,2,\\dots,n</span> whose longest monotone subsequence has exactly <span class=\"math inline\">k</span> elements.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Monotone Subsequences"
  },
  "243": {
    "problem_statement": "<p>Given a string, you want to reorder its characters so that no two adjacent characters are the same. What is the lexicographically minimal such string?</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "String Reorder"
  },
  "244": {
    "problem_statement": "<p>You have <span class=\"math inline\">n</span> coins, each of which has a distinct weight.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Stack Weights"
  },
  "245": {
    "problem_statement": "<p>You are given an array consisting of <span class=\"math inline\">n</span> distinct integers. On each move, you can swap any two adjacent values.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Pyramid Array"
  },
  "246": {
    "problem_statement": "<p>Given an array of <span class=\"math inline\">n</span> integers, your task is to calculate the number of increasing subsequences it contains. If two subsequences have the same values but in different positions in the array, they are counted separately.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Increasing Subsequence II"
  },
  "247": {
    "problem_statement": "<p>You are given a string. You can remove any number of characters from it, but you cannot change the order of the remaining characters.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "String Removals"
  },
  "248": {
    "problem_statement": "<p>There is a bit string consisting of <span class=\"math inline\">n</span> bits. Then, there are some changes that invert one given bit. Your task is to report, after each change, the length of the longest substring whose each bit is the same.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Bit Inversions"
  },
  "249": {
    "problem_statement": "<p>Consider a xor pyramid where each number is the xor of lower-left and lower-right numbers. Here is an example pyramid:\n<center><img alt=\"\" class=\"invertible\" height=\"\" src=\"/file/382652cc16953396bbaeeabf0e98daec74a4bda09afb8db8da0e67870205fc76\" width=\"250\"/></center>\nGiven the bottom row of the pyramid, your task is to find the topmost number.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Xor Pyramid"
  },
  "250": {
    "problem_statement": "<p>You would like to write a list of positive integers <span class=\"math inline\">1,2,3,\\ldots</span> using your computer. However, you can press each key <span class=\"math inline\">0</span>\u2013<span class=\"math inline\">9</span> at most <span class=\"math inline\">n</span> times during the process.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Writing Numbers"
  },
  "251": {
    "problem_statement": "<p>Consider the following string transformation:</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "String Transform"
  },
  "252": { "error": "", "problem_title": "Letter Pair Move Game" },
  "253": { "error": "", "problem_title": "Maximum Building I" },
  "254": {
    "problem_statement": "<p>Here are some possible methods using which we can sort the elements of an array in increasing order:</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Sorting Methods"
  },
  "255": {
    "problem_statement": "<p>You are given a cyclic array consisting of <span class=\"math inline\">n</span> values. Each element has two neighbors; the elements at positions <span class=\"math inline\">n</span> and <span class=\"math inline\">1</span> are also considered neighbors.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Cyclic Array"
  },
  "256": {
    "problem_statement": "<p>List <span class=\"math inline\">A</span> consists of <span class=\"math inline\">n</span> positive integers, and list <span class=\"math inline\">B</span> contains the sum of each element pair of list <span class=\"math inline\">A</span>.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "List of Sums"
  },
  "257": {
    "problem_statement": "<p>You are given an array of <span class=\"math inline\">n</span> integers. You want to modify the array so that it is increasing, i.e., every element is at least as large as the previous element.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Increasing Array II"
  },
  "258": {
    "problem_statement": "<p>There are <span class=\"math inline\">n</span> children around a round table. For each child, you know the amount of food they currently have and the amount of food they want. The total amount of food in the table is correct.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Food Division"
  },
  "259": {
    "problem_statement": "<p>Given a list of <span class=\"math inline\">n</span> integers, your task is to calculate for each element <span class=\"math inline\">x</span>:</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Bit Problem"
  },
  "260": {
    "problem_statement": "<p>You are given an array containing a permutation of numbers <span class=\"math inline\">1,2,\\dots,n</span>, and your task is to sort the array using <em>swap rounds</em>. On each swap round, you can choose any number of distinct pairs of elements and swap each pair.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Swap Round Sorting"
  },
  "261": {
    "problem_statement": "<p>Your task is to find a minimum length bit string that has exactly <span class=\"math inline\">n</span> distinct subsequences.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Binary Subsequences"
  },
  "262": {
    "problem_statement": "<p>Given two rooted trees, your task is to find out if they are <em>isomorphic</em>, i.e., it is possible to draw them so that they look the same.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Tree Isomorphism I"
  },
  "263": {
    "problem_statement": "<p>Your task is to count the number of sequences of length <span class=\"math inline\">n</span> where each element is an integer between <span class=\"math inline\">1 \\dots k</span> and each integer between <span class=\"math inline\">1 \\dots k</span> appears at least once in the sequence.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Counting Sequences"
  },
  "264": {
    "problem_statement": "<p>There are <span class=\"math inline\">n</span> cities and <span class=\"math inline\">m</span> flight connections between them. A city is called a <em>critical city</em> if it appears on every route from a city to another city.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Critical Cities"
  },
  "265": {
    "problem_statement": "<p>A group of <span class=\"math inline\">n</span> children are coming to Helsinki. There are two possible attractions: a child can visit either Korkeasaari (zoo) or Linnanm\u00e4ki (amusement park).</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "School Excursion"
  },
  "266": {
    "problem_statement": "<p>There is an <span class=\"math inline\">n \\times n</span> grid whose each square is empty or has a coin. On each move, you can remove all coins in a row or column.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Coin Grid"
  },
  "267": {
    "problem_statement": "<p>You are given a description of a robot's path. The robot begins at point <span class=\"math inline\">(0,0)</span> and performs <span class=\"math inline\">n</span> commands. Each command moves the robot some distance up, down, left or right.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Robot Path"
  },
  "268": {
    "problem_statement": "<p>A company wants to hire <span class=\"math inline\">a</span> programmers and <span class=\"math inline\">b</span> artists.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Programmers and Artists"
  },
  "269": {
    "problem_statement": "<p>You want to complete <span class=\"math inline\">n</span> courses that have requirements of the form \"course <span class=\"math inline\">a</span> has to be completed before course <span class=\"math inline\">b</span>\".</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Course Schedule II"
  },
  "270": {
    "problem_statement": "<p>You are given an integer <span class=\"math inline\">n</span>. On each step, you may subtract from it any one-digit number that appears in it.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Removing Digits II"
  },
  "271": {
    "problem_statement": "<p>There is a <span class=\"math inline\">2 \\times n</span> grid whose each cell contains some number of coins. The total number of coins is <span class=\"math inline\">2n</span>.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Coin Arrangement"
  },
  "272": {
    "problem_statement": "<p>Your task is to count the number of ways <span class=\"math inline\">k</span> bishops can be placed on an <span class=\"math inline\">n \\times n</span> chessboard so that no two bishops attack each other.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Counting Bishops"
  },
  "273": {
    "problem_statement": "<p>There is an <span class=\"math inline\">n \\times n</span> grid, and your task is to choose from each row and column some number of squares. How can you do that?</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Grid Puzzle I"
  },
  "274": {
    "problem_statement": "<p>There is an <span class=\"math inline\">n \\times n</span> grid whose each square has some number of coins in it.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Grid Puzzle II"
  },
  "275": {
    "problem_statement": "<p>You are given a string consisting of <span class=\"math inline\">n</span> characters between a and z.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Empty String"
  },
  "276": {
    "problem_statement": "<p>You are given a bit string of length <span class=\"math inline\">n</span>. Your task is to calculate for each <span class=\"math inline\">k</span> between <span class=\"math inline\">0  \\ldots n</span> the number of non-empty substrings that contain exactly <span class=\"math inline\">k</span> ones.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Bit Substrings"
  },
  "277": {
    "problem_statement": "<p>You have an array that contains a permutation of integers <span class=\"math inline\">1,2,\\dots,n</span>. Your task is to sort the array in increasing order by reversing subarrays. You can construct any solution that has at most <span class=\"math inline\">n</span> reversals.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Reversal Sorting"
  },
  "278": {
    "problem_statement": "<p>Calculate the number of ways you can reorder the characters of a string so that no two adjacent characters are the same.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Counting Reorders"
  },
  "279": {
    "problem_statement": "<p>You are in a book shop which sells <span class=\"math inline\">n</span> different books. You know the price, the number of pages and the number of copies of each book.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Book Shop II"
  },
  "280": {
    "problem_statement": "<p>Syrj\u00e4l\u00e4's network has <span class=\"math inline\">n</span> computers and <span class=\"math inline\">m</span> connections between them. The network consists of components of computers that can send messages to each other.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Network Breakdown"
  },
  "281": {
    "problem_statement": "<p>You want to travel from Syrj\u00e4l\u00e4 to Lehm\u00e4l\u00e4 by plane using a minimum-price route. Which cities will you certainly visit?</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Visiting Cities"
  },
  "282": {
    "problem_statement": "<p>You have <span class=\"math inline\">n</span> coins with positive integer values. The coins are numbered <span class=\"math inline\">1,2,\\dots,n</span>.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Missing Coin Sum Queries"
  },
  "283": {
    "problem_statement": "<p>Consider a two-dimensional grid whose rows and columns are <span class=\"math inline\">1</span>-indexed. Each square contains the smallest nonnegative integer that does not appear to the left on the same row or above on the same column.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Number Grid"
  },
  "284": {
    "problem_statement": "<p>You are given a map of a forest where some squares are empty and some squares have trees.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Maximum Building II"
  },
  "285": {
    "problem_statement": "<p>Your task is to fill an <span class=\"math inline\">n \\times m</span> grid using L-trominos (three squares that have an L-shape). For example, here is one way to fill a <span class=\"math inline\">4 \\times 6</span> grid:\n<center><img alt=\"\" class=\"invertible\" src=\"/file/da3ce928fcf66fd793d582a1a5ad7f7f9cc37e68aa2aadacee90f99bc4271692\"/></center></p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Filling Trominos"
  },
  "286": {
    "problem_statement": "<p>You have a stick of length <span class=\"math inline\">x</span> and you want to divide it into <span class=\"math inline\">n</span> sticks, with given lengths, whose total length is <span class=\"math inline\">x</span>.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Stick Divisions"
  },
  "287": {
    "problem_statement": "<p>Your company has <span class=\"math inline\">n</span> coders, and each of them has a skill level between <span class=\"math inline\">0</span> and <span class=\"math inline\">100</span>. Your task is to divide the coders into teams that work together.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Coding Company"
  },
  "288": {
    "problem_statement": "<p>There are <span class=\"math inline\">n</span> cities with airports but no flight connections. You are given <span class=\"math inline\">m</span> requests which routes should be possible to travel.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Flight Route Requests"
  },
  "289": {
    "problem_statement": "<p>You are given an input list that consists of <span class=\"math inline\">n</span> numbers. Each integer between <span class=\"math inline\">1</span> and <span class=\"math inline\">n</span> appears exactly once in the list.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Two Stacks Sorting"
  },
  "290": {
    "problem_statement": "<p>Given two (not rooted) trees, your task is to find out if they are <em>isomorphic</em>, i.e., it is possible to draw them so that they look the same.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Tree Isomorphism II"
  },
  "291": {
    "problem_statement": "<p>There are <span class=\"math inline\">n</span> cities and <span class=\"math inline\">m</span> roads between them. Kaaleppi is currently in city <span class=\"math inline\">a</span> and wants to travel to city <span class=\"math inline\">b</span>.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Forbidden Cities"
  },
  "292": {
    "problem_statement": "<p>Given <span class=\"math inline\">n</span> rectangles, your task is to determine the total area of their union.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Area of Rectangles"
  },
  "293": {
    "problem_statement": "<p>Your task is to create an <span class=\"math inline\">n \\times n</span> grid whose each row and column has exactly one A and B. Some of the characters have already been placed. In how many ways can you complete the grid?</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Grid Completion"
  },
  "294": {
    "problem_statement": "<p>There are <span class=\"math inline\">n</span> cities and <span class=\"math inline\">n-1</span> roads between them. There is a unique route between any two cities, and their distance is the number of roads on that route.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Creating Offices"
  },
  "295": {
    "problem_statement": "<p>A permutation of integers <span class=\"math inline\">1,2,\\ldots,n</span> is called <em>beautiful</em> if there are no adjacent elements whose difference is <span class=\"math inline\">1</span>.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Permutations II"
  },
  "296": {
    "problem_statement": "<p>A <em>functional graph</em> is a directed graph where each node has outdegree <span class=\"math inline\">1</span>. For example, here is a functional graph that has <span class=\"math inline\">9</span> nodes and <span class=\"math inline\">2</span> components:\n<center><img alt=\"\" class=\"invertible\" height=\"\" src=\"/file/39a5e727e368197cdce7593736c5cfd1abf75b6439c0823e27c671ff10662377\" width=\"300\"/></center>\nGiven <span class=\"math inline\">n</span>, your task is to calculate for each <span class=\"math inline\">k=1 \\dots n</span> the number of functional graphs that have <span class=\"math inline\">n</span> nodes and <span class=\"math inline\">k</span> components.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Functional Graph Distribution"
  },
  "297": {
    "problem_statement": "<p>There are <span class=\"math inline\">n</span> cities and <span class=\"math inline\">m</span> flight connections between them. Your task is to add new flights so that it will be possible to travel from any city to any other city. What is the minimum number of new flights required?</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "New Flight Routes"
  },
  "298": {
    "problem_statement": "<p>Given an <span class=\"math inline\">n \\times m</span> grid and two squares <span class=\"math inline\">a=(y_1,x_1)</span> and <span class=\"math inline\">b=(y_2,x_2)</span>, create a path from <span class=\"math inline\">a</span> to <span class=\"math inline\">b</span> that visits each square exactly once.</p>",
    "problem_input": "<h1 id=\"input\">Input</h1>",
    "problem_output": "<h1 id=\"output\">Output</h1>",
    "problem_constraints": "<h1 id=\"constraints\">Constraints</h1>",
    "problem_examples": "<h1 id=\"example\">Example</h1>",
    "problem_title": "Grid Path Construction"
  }
}
